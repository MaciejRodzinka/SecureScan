import UIKit
import SafariServices

class SettingsViewController: UIViewController {
    
    private let tableView = UITableView(frame: .zero, style: .insetGrouped)
    private let settingsManager = SettingsManager.shared
    
    
    private enum Section: Int, CaseIterable {
        case notifications
        case appearance
        case security
        case appInfo
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    private func setupUI() {
        title = "Ustawienia"
        view.backgroundColor = .systemBackground
        navigationController?.navigationBar.prefersLargeTitles = true
        
        // Dodaj funkcję, która będzie aktualizować kolory przy zmianie motywu
        NotificationCenter.default.addObserver(self, selector: #selector(updateColorsForTheme), name: .didChangeUserInterfacePreferences, object: nil)
        
        // Configure table view
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "SettingCell")
        tableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: "SwitchCell")
        tableView.backgroundColor = .clear
        tableView.separatorStyle = .singleLine
        tableView.separatorInset = UIEdgeInsets(top: 0, left: 52, bottom: 0, right: 0)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 60
        
        view.addSubview(tableView)
        
        // Set auto layout constraints
        tableView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }
}

// MARK: - UITableViewDataSource
extension SettingsViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return Section.allCases.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch Section(rawValue: section)! {
        case .notifications:
            return 2
        case .appearance:
            return 1
        case .security:
            return 2
        case .appInfo:
            return 3
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch Section(rawValue: indexPath.section)! {
            
        case .notifications:
            let cell = tableView.dequeueReusableCell(withIdentifier: "SwitchCell", for: indexPath) as! SwitchTableViewCell
            
            if indexPath.row == 0 {
                cell.configure(
                    title: "Powiadomienia",
                    subtitle: "Otrzymuj powiadomienia o potencjalnych zagrożeniach",
                    icon: "bell.fill",
                    iconColor: .systemBlue,
                    isOn: settingsManager.areNotificationsEnabled
                ) { [weak self] isOn in
                    self?.settingsManager.areNotificationsEnabled = isOn
                }
            } else {
                cell.configure(
                    title: "Porady bezpieczeństwa",
                    subtitle: "Regularnie otrzymuj wskazówki dotyczące bezpieczeństwa online",
                    icon: "lightbulb.fill",
                    iconColor: .systemYellow,
                    isOn: settingsManager.areSecurityTipsEnabled
                ) { [weak self] isOn in
                    self?.settingsManager.areSecurityTipsEnabled = isOn
                }
            }
            return cell
            
        case .appearance:
            let cell = tableView.dequeueReusableCell(withIdentifier: "SwitchCell", for: indexPath) as! SwitchTableViewCell
            cell.configure(
                title: "Tryb ciemny",
                subtitle: "Zmień wygląd aplikacji na ciemny motyw",
                icon: "moon.fill",
                iconColor: .systemIndigo,
                isOn: settingsManager.isDarkModeEnabled
            ) { [weak self] isOn in
                self?.settingsManager.isDarkModeEnabled = isOn
            }
            return cell
            
        case .security:
            if indexPath.row == 0 {
                let cell = tableView.dequeueReusableCell(withIdentifier: "SwitchCell", for: indexPath) as! SwitchTableViewCell
                cell.configure(
                    title: "Automatyczne skanowanie linków",
                    subtitle: "Automatycznie sprawdzaj bezpieczeństwo linków",
                    icon: "link.badge.plus",
                    iconColor: .systemGreen,
                    isOn: settingsManager.isAutoScanLinksEnabled
                ) { [weak self] isOn in
                    self?.settingsManager.isAutoScanLinksEnabled = isOn
                }
                return cell
            } else {
                let cell = tableView.dequeueReusableCell(withIdentifier: "SettingCell", for: indexPath)
                cell.accessoryType = .disclosureIndicator
                
                // Dodaj ikonę i tekst
                let iconView = UIImageView(frame: CGRect(x: 0, y: 0, width: 24, height: 24))
                iconView.image = UIImage(systemName: "trash.fill")
                iconView.contentMode = .scaleAspectFit
                iconView.tintColor = .systemRed
                
                let labelOffset = iconView.bounds.width + 12
                
                
                let containerView = UIView(frame: CGRect(x: 0, y: 0, width: 40, height: 24))
                iconView.center = CGPoint(x: 20, y: 12) 
                containerView.addSubview(iconView)
                
                cell.imageView?.image = nil 
                cell.textLabel?.text = "Wyczyść historię skanowań"
                cell.textLabel?.textColor = .systemRed
                cell.textLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
                
                cell.indentationWidth = labelOffset
                cell.indentationLevel = 1
                
                // Dodaj kontener jako accessoryView
                cell.accessoryView = UIImageView(image: UIImage(systemName: "chevron.right"))
                cell.accessoryView?.tintColor = .systemGray2
                
                
                cell.imageView?.image = UIImage(systemName: "trash.fill")
                cell.imageView?.tintColor = .systemRed
                
                return cell
            }
            
        case .appInfo:
            let cell = tableView.dequeueReusableCell(withIdentifier: "SettingCell", for: indexPath)
            cell.accessoryType = .disclosureIndicator
            
            
            cell.textLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
            
            
            switch indexPath.row {
            case 0:
                cell.textLabel?.text = "O aplikacji"
                cell.imageView?.image = UIImage(systemName: "info.circle.fill")
                cell.imageView?.tintColor = .systemBlue
            case 1:
                cell.textLabel?.text = "Polityka prywatności"
                cell.imageView?.image = UIImage(systemName: "hand.raised.fill")
                cell.imageView?.tintColor = .systemGreen
            case 2:
                cell.textLabel?.text = "Warunki użytkowania"
                cell.imageView?.image = UIImage(systemName: "doc.text.fill")
                cell.imageView?.tintColor = .systemIndigo
            default:
                break
            }
            return cell
        }
    }
    
    
    @objc private func updateColorsForTheme() {
        tableView.reloadData() 
        
        
        view.setNeedsLayout()
        view.layoutIfNeeded()
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = UIView()
        headerView.backgroundColor = UIColor.secondarySystemBackground
        
        let titleLabel = UILabel()
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.font = UIFont.systemFont(ofSize: 14, weight: .bold)
        titleLabel.textColor = .secondaryLabel
        
        
        var headerTitle = ""
        var icon: UIImage? = nil
        var iconColor: UIColor = .systemBlue
        
        switch Section(rawValue: section)! {
        case .notifications:
            headerTitle = "POWIADOMIENIA"
            icon = UIImage(systemName: "bell.circle.fill")
            iconColor = .systemBlue
        case .appearance:
            headerTitle = "WYGLĄD"
            icon = UIImage(systemName: "paintbrush.fill")
            iconColor = .systemIndigo
        case .security:
            headerTitle = "BEZPIECZEŃSTWO"
            icon = UIImage(systemName: "lock.circle.fill")
            iconColor = .systemGreen
        case .appInfo:
            headerTitle = "INFORMACJE"
            icon = UIImage(systemName: "info.circle.fill")
            iconColor = .systemOrange
        }
        
        titleLabel.text = headerTitle
        
        // Utwórz widok ikony
        let iconView = UIImageView(image: icon)
        iconView.translatesAutoresizingMaskIntoConstraints = false
        iconView.contentMode = .scaleAspectFit
        iconView.tintColor = iconColor
        
        // Dodaj elementy do widoku nagłówka
        headerView.addSubview(iconView)
        headerView.addSubview(titleLabel)
        
        // Ograniczenia dla ikony i etykiety
        NSLayoutConstraint.activate([
            iconView.leadingAnchor.constraint(equalTo: headerView.leadingAnchor, constant: 16),
            iconView.centerYAnchor.constraint(equalTo: headerView.centerYAnchor),
            iconView.widthAnchor.constraint(equalToConstant: 20),
            iconView.heightAnchor.constraint(equalToConstant: 20),
            
            titleLabel.leadingAnchor.constraint(equalTo: iconView.trailingAnchor, constant: 8),
            titleLabel.centerYAnchor.constraint(equalTo: headerView.centerYAnchor),
            titleLabel.trailingAnchor.constraint(lessThanOrEqualTo: headerView.trailingAnchor, constant: -16)
        ])
        
        return headerView
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 40
    }
}

// MARK: - UITableViewDelegate
extension SettingsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        if Section(rawValue: indexPath.section) == .security && indexPath.row == 1 {
            // Clear scan history
            confirmClearHistory()
        } else if Section(rawValue: indexPath.section) == .appInfo {
            switch indexPath.row {
            case 0:
                showAboutApp()
            case 1:
                showPrivacyPolicy()
            case 2:
                showTermsOfService()
            default:
                break
            }
        }
    }
    
    private func confirmClearHistory() {
        let alert = UIAlertController(title: "Wyczyścić historię?", message: "Ta operacja usunie całą historię skanowań i nie można jej cofnąć.", preferredStyle: .alert)
        
        alert.addAction(UIAlertAction(title: "Anuluj", style: .cancel))
        alert.addAction(UIAlertAction(title: "Wyczyść", style: .destructive) { [weak self] _ in
            
            URLScannerService.shared.clearHistory()
            SMSAnalyzerService.shared.clearHistory()
            
            
            let confirmationAlert = UIAlertController(title: "Gotowe", message: "Historia została wyczyszczona.", preferredStyle: .alert)
            confirmationAlert.addAction(UIAlertAction(title: "OK", style: .default))
            self?.present(confirmationAlert, animated: true)
        })
        
        present(alert, animated: true)
    }
    
    private func showAboutApp() {
        let aboutVC = UIViewController()
        aboutVC.title = "O aplikacji"
        aboutVC.view.backgroundColor = .systemBackground
        
        let scrollView = UIScrollView()
        aboutVC.view.addSubview(scrollView)
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: aboutVC.view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: aboutVC.view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: aboutVC.view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: aboutVC.view.safeAreaLayoutGuide.bottomAnchor)
        ])
        
        let contentView = UIView()
        scrollView.addSubview(contentView)
        contentView.translatesAutoresizingMaskIntoConstraints = false
        
        let padding: CGFloat = 20
        
        NSLayoutConstraint.activate([
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])
        
        let appIconView = UIImageView(image: UIImage(named: "AppIcon"))
        appIconView.contentMode = .scaleAspectFit
        appIconView.layer.cornerRadius = 20
        appIconView.clipsToBounds = true
        contentView.addSubview(appIconView)
        appIconView.translatesAutoresizingMaskIntoConstraints = false
        
        let titleLabel = UILabel()
        titleLabel.text = "SmartGuardian"
        titleLabel.font = UIFont.systemFont(ofSize: 22, weight: .bold)
        titleLabel.textAlignment = .center
        contentView.addSubview(titleLabel)
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        
        let versionLabel = UILabel()
        versionLabel.text = "Wersja 1.0"
        versionLabel.font = UIFont.systemFont(ofSize: 16)
        versionLabel.textColor = .secondaryLabel
        versionLabel.textAlignment = .center
        contentView.addSubview(versionLabel)
        versionLabel.translatesAutoresizingMaskIntoConstraints = false
        
        let descriptionLabel = UILabel()
        descriptionLabel.text = "SmartGuardian to aplikacja służąca do ochrony przed phishingiem, smishingiem oraz edukacji użytkowników w zakresie bezpieczeństwa online. Aplikacja została stworzona z myślą o zapewnieniu praktycznej ochrony oraz edukacji wszystkich użytkowników, w tym seniorów, osób mniej doświadczonych w internecie oraz młodzieży."
        descriptionLabel.font = UIFont.systemFont(ofSize: 16)
        descriptionLabel.numberOfLines = 0
        contentView.addSubview(descriptionLabel)
        descriptionLabel.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            appIconView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: padding * 2),
            appIconView.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),
            appIconView.widthAnchor.constraint(equalToConstant: 100),
            appIconView.heightAnchor.constraint(equalToConstant: 100),
            
            titleLabel.topAnchor.constraint(equalTo: appIconView.bottomAnchor, constant: padding),
            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: padding),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -padding),
            
            versionLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: padding / 2),
            versionLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: padding),
            versionLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -padding),
            
            descriptionLabel.topAnchor.constraint(equalTo: versionLabel.bottomAnchor, constant: padding),
            descriptionLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: padding),
            descriptionLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -padding),
            descriptionLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -padding * 2)
        ])
        
        navigationController?.pushViewController(aboutVC, animated: true)
    }
    
    private func showPrivacyPolicy() {
        // In a real app, these would be actual URLs to your privacy policy
        if let url = URL(string: "https:
            let safariVC = SFSafariViewController(url: url)
            present(safariVC, animated: true)
        }
    }
    
    private func showTermsOfService() {
        
        if let url = URL(string: "https://example.com/terms") {
            let safariVC = SFSafariViewController(url: url)
            present(safariVC, animated: true)
        }
    }
}

// Dodaj rozszerzenie NotificationName dla notyfikacji zmiany motywu
extension Notification.Name {
    static let didChangeUserInterfacePreferences = Notification.Name("DidChangeUserInterfacePreferences")
}

class SwitchTableViewCell: UITableViewCell {
    
    private let switchControl = UISwitch()
    private var switchAction: ((Bool) -> Void)?
    private let iconImageView = UIImageView()
    private let titleLabel = UILabel()
    private let subtitleLabel = UILabel()
    
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        
        
        switchControl.addTarget(self, action: #selector(switchChanged), for: .valueChanged)
        accessoryView = switchControl
        selectionStyle = .none
        
        
        iconImageView.contentMode = .scaleAspectFit
        iconImageView.tintColor = .systemBlue
        
        
        titleLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        titleLabel.textColor = .label
        
        
        subtitleLabel.font = UIFont.systemFont(ofSize: 13)
        subtitleLabel.textColor = .secondaryLabel
        subtitleLabel.numberOfLines = 2
        
        
        contentView.addSubview(iconImageView)
        contentView.addSubview(titleLabel)
        contentView.addSubview(subtitleLabel)
        
        
        iconImageView.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            iconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            iconImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            iconImageView.widthAnchor.constraint(equalToConstant: 24),
            iconImageView.heightAnchor.constraint(equalToConstant: 24),
            
            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 12),
            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -60),
            
            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),
            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 2),
            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),
            subtitleLabel.bottomAnchor.constraint(lessThanOrEqualTo: contentView.bottomAnchor, constant: -10)
        ])
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func configure(title: String, subtitle: String? = nil, icon: String, iconColor: UIColor? = nil, isOn: Bool, action: @escaping (Bool) -> Void) {
        titleLabel.text = title
        subtitleLabel.text = subtitle
        subtitleLabel.isHidden = subtitle == nil
        
        // Ustawienie ikony SF Symbol
        iconImageView.image = UIImage(systemName: icon)
        iconImageView.tintColor = iconColor ?? .systemBlue
        
        switchControl.isOn = isOn
        switchAction = action
    }
    
    @objc private func switchChanged() {
        switchAction?(switchControl.isOn)
        
        // Animacja naciśnięcia przycisku
        UIView.animate(withDuration: 0.1, animations: {
            self.switchControl.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
        }) { _ in
            UIView.animate(withDuration: 0.1) {
                self.switchControl.transform = CGAffineTransform.identity
            }
        }
        
        // Dodanie sprzężenia dotykowego (haptic feedback)
        let generator = UIImpactFeedbackGenerator(style: .light)
        generator.impactOccurred()
    }
}
